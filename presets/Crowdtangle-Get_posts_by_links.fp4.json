{
  "name": "Get posts by links",
  "category": "Crowdtangle",
  "description": "Add cleaned URLs as seed nodes. \n\nBest practice: create a semicolon separated CSV file containing the url, date_start and date_end columns. You can import the file within the Add Nodes dialog.\n\nThis preset fetches 100 posts matching the given links. You can set the count parameter up to 1000.\n\nMake sure to set startDate and endDate parameters.\n\nThis preset searches the entire, cross-platform CrowdTangle system of posts (Facebook and Instagram). If you want the posts from a specific platform, set the platforms parameter\n\nDON'T FORGET: Before you can fetch the data, you must enter your CrowdTangle access token in the corresponding field \"access token\" for authentication.\n\nSee https://github.com/CrowdTangle/API/wiki/Links for more parameter options. \n\nAPI-Cheatsheet: https://help.crowdtangle.com/en/articles/3443476-api-cheat-sheet",
  "module": "Generic",
  "options": {
    "auth": "param",
    "auth_tokenname": "token",
    "auth_type": "API key",
    "auth_uri": "",
    "basepath": "https://api.crowdtangle.com",
    "extension": "",
    "fileext": "<None>",
    "filename": "<None>",
    "format": "json",
    "headers": {},
    "key_paging": "result.pagination.nextPage",
    "nodedata": "result.posts",
    "objectid": "platformId",
    "pages": 1,
    "paging_type": "url",
    "params": {
      "count": "100",
      "endDate": "<date_end>",
      "includeHistory": "true",
      "includeSummary": "true",
      "link": "<Object ID>",
      "platforms": "",
      "searchField": "Include_query_strings",
      "sortBy": "date",
      "startDate": "2021-08-01"
    },
    "proxy": "",
    "redirect_uri": "",
    "resource": "/links",
    "scope": "",
    "token_uri": "",
    "verb": "GET"
  },
  "speed": 60,
  "saveheaders": false,
  "timeout": 60,
  "maxsize": 5,
  "columns": [
    "account.name",
    "account.handle",
    "platform",
    "date",
    "updated",
    "history.*.actual.likeCount",
    "history.*.expected.likeCount",
    "history.*.actual.shareCount",
    "history.*.expected.shareCount",
    "history.*.actual.commentCount",
    "history.*.expected.commentCount",
    "history.*.actual.likeCount",
    "history.*.timestep",
    "history.*.date",
    "history.*.score",
    "type",
    "message",
    "expandedLinks",
    "link",
    "postUrl",
    "subscriberCount",
    "score",
    "media",
    "statistics.actual.likeCount",
    "statistics.actual.shareCount",
    "statistics.actual.commentCount",
    "statistics.actual.loveCount",
    "statistics.actual.wowCount",
    "statistics.actual.hahaCount",
    "statistics.actual.sadCount",
    "statistics.actual.angryCount",
    "statistics.actual.thankfulCount",
    "statistics.actual.careCount",
    "statistics.expected.likeCount",
    "statistics.expected.shareCount",
    "statistics.expected.commentCount",
    "statistics.expected.loveCount",
    "statistics.expected.wowCount",
    "statistics.expected.hahaCount",
    "statistics.expected.sadCount",
    "statistics.expected.angryCount",
    "statistics.expected.thankfulCount",
    "statistics.expected.careCount",
    "account.id",
    "account.profileImage",
    "account.subscriberCount",
    "account.url",
    "account.platform",
    "account.platformId",
    "account.accountType",
    "account.pageAdminTopCountry",
    "account.verified",
    "videoLengthMS",
    "legacyId",
    "apiid=id",
    "platformId",
    "result.summary.facebook.shareCount",
    "status",
    "notes",
    "result.summary.facebook.loveCount",
    "result.summary.facebook.careCount",
    "result.summary.facebook.wowCount",
    "result.summary.facebook.sadCount",
    "result.summary.facebook.angryCount",
    "result.summary.facebook.thankfulCount",
    "result.summary.facebook.likeCount",
    "result.summary.facebook.hahaCount",
    "result.summary.facebook.commentCount",
    "result.summary.instagram.likeCount",
    "result.summary.instagram.commentCount"
  ]
}